<launch>
    <arg name="paused" default="false"/>
    <arg name="gui" default="true"/>

    <!-- start gazebo with empty world -->
    <!--
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find grasping_sim)/worlds/table.sdf"/>
        <arg name="paused" value="$(arg paused)" />
        <arg name="gui" value="$(arg gui)" />
    </include>
    -->
    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find grasping_sim)/config/arm_controller.yaml" command="load"/>
    <rosparam file="$(find grasping_sim)/config/arm_controller.yaml" command="load" ns="right_arm"/>
    <include file="$(find grasping_sim)/launch/spawn_humanoid.launch"/>

    <!-- load the controllers -->

    <!-- robot state publisher -->
    <!--
    <node ns="arm" pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="50.0" />
        <param name="tf_prefix" type="string" value="" /> -->
        <!--remap from="joint_states" to="/arm/joint_states"/-->
    <!--
    </node>
    -->
    <!--
    <node ns="right_arm" pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="50.0" />
        <param name="tf_prefix" type="string" value="" /> -->
        <!--remap from="joint_states" to="/arm/joint_states"/-->
    <!--
    </node>
    -->
    <!-- fake Calibration and HW-Services -->
    <node pkg="rostopic" type="rostopic" name="fake_joint_calibration" args="pub /calibrated std_msgs/Bool true" />
    <node ns="arm" pkg="cob_helper_tools" type="fake_driver.py" name="fake_driver" cwd="node" respawn="false" output="screen"/>
    <!--
    <node ns="right_arm" pkg="cob_helper_tools" type="fake_driver.py" name="fake_driver" cwd="node" respawn="false" output="screen"/>
    -->
    <!-- controllers -->
    <rosparam ns="arm" command="load" file="$(find grasping_sim)/config/arm_controller.yaml" />
    <!--rosparam ns="arm" command="load" file="$(find schunk_lwa4p)/config/joint_limits.yaml"/-->
    <!--
    <rosparam ns="right_arm" command="load" file="$(find grasping_sim)/config/arm_controller.yaml" />
    -->
    <!-- start_controllers -->
    <node ns="arm" name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>
    <!--
    <node ns="right_arm" name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>
    -->
    <!-- control_mode_adapter -->
    <node ns="arm" name="cob_control_mode_adapter_node" pkg="cob_control_mode_adapter" type="cob_control_mode_adapter_node" cwd="node" respawn="false" output="screen"/>
    <node ns="arm" name="joint_states_relay" pkg="topic_tools" type="relay" args="joint_states /joint_states" cwd="node" respawn="true" output="screen"/>
    <!--
    <node ns="right_arm" name="cob_control_mode_adapter_node" pkg="cob_control_mode_adapter" type="cob_control_mode_adapter_node" cwd="node" respawn="false" output="screen"/>
    <node ns="right_arm" name="joint_states_relay" pkg="topic_tools" type="relay" args="joint_states /joint_states" cwd="node" respawn="true" output="screen"/>
    -->
    <!-- start diagnostics -->
    <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" >
        <rosparam command="load" file="$(find grasping_sim)/config/diagnostics_analyzers.yaml" />
    </node>
    <node pkg="cob_dashboard" type="cob_dashboard_aggregator.py" name="dashboard_aggregator" />

    <!-- upload script server parameters -->
    <rosparam command="load" ns="/script_server/arm" file="$(find grasping_sim)/config/joint_configurations.yaml"/>

    <include file="$(find moveit_sim)/launch/moveit_planning_execution.launch"/>

</launch>